{"version":3,"sources":["serviceWorker.js","TodoInput.js","TodoItem.js","App.js","localStore.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoInput","react_default","a","createElement","type","value","this","props","content","className","onChange","changeTitle","bind","onKeyPress","submit","e","key","onSubmit","Component","TodoItem","checked","todo","status","toggle","title","onClick","delete","onToggle","onDelete","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newTodo","todoList","JSON","parse","localStorage","getItem","_this2","todos","filter","item","deleted","map","index","TodoItem_TodoItem","TodoInput_TodoInput","addTodo","setItem","stringify","event","push","id","target","setState","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f821a294.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './TodoInput.css'\n\nexport default class TodoInput extends Component {\n  render(){\n    return <input type=\"text\" value={this.props.content}\n      className=\"TodoInput\"\n      onChange={this.changeTitle.bind(this)}\n      onKeyPress={this.submit.bind(this)}/>\n  }\n  submit(e){\n    if (e.key === 'Enter') {\n      this.props.onSubmit(e)\n    }\n  }\n  changeTitle(e){\n    this.props.onChange(e)\n  }\n}","import React, { Component } from 'react';\nimport './TodoItem.css'\n\nexport default class TodoItem extends Component {\n  render(){\n    return (\n      <div className=\"TodoItem\">\n        <input type=\"checkbox\" checked={this.props.todo.status === 'completed'}\n          onChange={this.toggle.bind(this)}/> \n        <span className=\"title\">{this.props.todo.title}</span>\n        <button onClick={this.delete.bind(this)}>删除</button>\n      </div>\n    )\n  }\n  toggle(e){\n    this.props.onToggle(e, this.props.todo)\n  }\n  delete(e){\n    this.props.onDelete(e, this.props.todo)\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport TodoInput from './TodoInput'\nimport TodoItem from './TodoItem'\nimport 'normalize.css'\nimport './reset.css'\nimport * as localStore from './localStore'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      newTodo: '',\n      todoList: localStore.load('todoList') || []\n    }\n  }\n  render() {\n    let todos = this.state.todoList.filter((item) => !item.deleted)\n    .map((item,index)=>{\n      return ( // 为什么这里要加个括号？这是动手题3 🐸\n        <li key={index} >\n          <TodoItem todo={item} onToggle={this.toggle.bind(this)} \n            onDelete={this.delete.bind(this)}/>\n        </li>\n      )\n    })\n    return (\n      <div className=\"App\">\n          <h1>我的待办</h1>\n          <div className=\"inputWrapper\">\n          <TodoInput content={this.state.newTodo} \n            onChange={this.changeTitle.bind(this)}\n            onSubmit={this.addTodo.bind(this)} />\n          </div>\n        <ol className=\"todoList\">\n        {todos}\n        </ol>\n      </div>\n    )\n  }\n  componentDidUpdate(){\n    localStore.save('todoList', this.state.todoList)\n  }\n  addTodo(event){\n    this.state.todoList.push({\n      id: idMaker(),\n      title: event.target.value,\n      status: null,\n      deleted: false\n    })\n    this.setState({\n      newTodo: '',\n      todoList: this.state.todoList\n    })\n  }\n  toggle(e, todo){\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state) \n  }\n  changeTitle(event){\n    this.setState({\n      newTodo: event.target.value,\n      todoList: this.state.todoList\n    })\n  }\n  delete(event, todo){\n    todo.deleted = true\n    this.setState(this.state) \n  }\n}\n\nexport default App;\n\nlet id = 0\n function idMaker(){\n  id += 1\n  return id\n}","export function save(key, value){\n  return window.localStorage.setItem(key, JSON.stringify(value))\n}\n export function load(key){\n  return JSON.parse(window.localStorage.getItem(key))\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\n\nReactDOM.render( < App / > ,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}